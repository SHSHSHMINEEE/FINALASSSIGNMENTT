# ----------------------------
# Test Cases
# ----------------------------


def test_case_1():
    print("--- Test Case 1 ---")
    admin = Admin("a001", "Admin Aisha", 23, "admin@example.com", "0508888888")
    admin.setIsActive(ACTIVE)
    admin.setPermission(["Add Event", "Edit Discount", "View Sales"])
    admin.setCapacity(3)
    customer = Customer("c001", "John Doe", 19, "john@example.com", "0501234567")
    tickets_available = 100
    initial_ticket_list = []
    event = Event(10, "Tech Expo", datetime(2025, 11, 5), "Abu Dhabi", "Technology showcase", tickets_available,
                  initial_ticket_list)
    ticket1 = Ticket(201, "Gold", 800.0, "Full Day", 2023)
    ticket2 = Ticket(202, "Silver", 400.0, "Half Day", 2024)
    discount = Discount(301, 5, ["Gold"], datetime(2025, 12, 31))
    order = Order(401, customer, [], discount)
    order.add_ticket(ticket1)
    order.add_ticket(ticket2)
    customer.makePurchase(ticket1)  # Add to purchase history

    # Calculate totals
    original_total = order.calculateOriginalTotal()
    total_after_discount = order.applyDiscount()

    # Create payment with the correct final amount
    payment = Payment(501, total_after_discount, "Debit Card", order, discount)
    payment.process_payment()
    invoice = Invoice(601, order, payment, customer, total_after_discount, datetime.now(),
                      "Paid" if payment.payment_status else "Pending")

    print("-----Admin:-----")
    print(f"  ID: {admin.user_id}\n  "
          f"Name: {admin.name}\n  "
          f"Age: {admin.age}\n  "
          f"Email: {admin.email}\n  "
          f"Phone: {admin.phone_number}")
    print(f"  Active: {admin.is_active}\n  "
          f"Permissions: {admin.permissions}\n  "
          f"Capacity: {admin.capacity}")

    print("\n-----Customer:-----")
    print(
        f"  ID: {customer.user_id}\n"
        f"  Name: {customer.name}\n"
        f"  Age: {customer.age}\n"
        f"  Email: {customer.email}\n"
        f"  Wallet Balance: {customer.wallet_balance}\n"
        f"  Purchase History: {[ticket.ticket_id for ticket in customer.purchase_history]}\n"
        f"  Account Created: {customer.account_created}")
    print("\n-----Event:-----")
    print(
        f"  ID: {event.event_id}\n  "
        f"Name: {event.event_name}\n  "
        f"Date: {event.date}\n  "
        f"Location: {event.location}\n  "
        f"Description: {event.description}\n"
        f"Available Tickets: {event.tickets_available}\n"
        f"Number of Tickets Listed: {len(event.ticketsList)}")

    print("\n-----Tickets in Order:-----")
    for t in order.tickets:
        print(
            f"  ID: {t.ticket_id}\n"
            f"  Type: {t.ticket_type}\n"
            f"  Price: {t.price}\n"
            f"  Validity: {t.validity}\n"
            f"  Race Date: {t.race_date}")

        print("\n-----Order:-----")
        print(f"  ID: {order.order_id}\n"
              f"    Customer Name: {order.customer.name}\n"
              f"    Tickets: {[ticket.ticket_id for ticket in order.tickets]}\n"
              f"  Total Amount Before Discount: {sum(ticket.price for ticket in order.getTickets())}\n"
              f"  Discount Applied: {discount.percentage}%\n"
              f"  Total After Discount: {total_after_discount}\n"
              f"  Order Date: {order.order_date}")

        print("\n-----Payment:-----")
        print(
            f"  ID: {payment.payment_id}\n"
            f"  Method: {payment.method}\n"
            f"  Status: {payment.payment_status}\n"
            f"  Date: {payment.payment_date}\n"
            f"  Original Amount: {payment.original_amount} AED\n"
            f"  Discount Applied: {discount.percentage}%\n"
            f"  Amount After Discount: {order.applyDiscount()} AED\n"
            f"  Order Ref: {payment.order.order_id}\n")

        print("\n-----Invoice:-----")
        print(f"  ID: {invoice.invoice_id}\n"
              f"  Customer Name: {invoice.customer.name}\n"
              f"  Order Ref: {invoice.order.order_id}\n"
              f"  Payment Ref: {invoice.payment.payment_id}\n"
              f"  Total: {invoice.total_amount}\n"
              f"  Status: {invoice.status}\n"
              f"  Issue Date: {invoice.issue_date}\n"
              f"  Is Paid?: {invoice.isPaid()}")

# Second test case
def test_case_2():
    print("\n--- Test Case 2 ---")
    admin = Admin("a002", "Admin Kareem", 30, "kareem_admin@example.com", "0509999999")
    admin.setIsActive(ACTIVE)
    admin.setPermission(["Track Sales", "Update Event", "Apply Discount"])
    admin.setCapacity(5)

    customer = Customer("c002", "Sara Ahmed", 25, "sara@example.com", "0507654321")
    tickets_available = 200
    initial_ticket_list = []
    event = Event(20, "Music Fest", datetime(2025, 12, 10), "Dubai", "Live concert with multiple artists",
                  tickets_available, initial_ticket_list)

    ticket1 = Ticket(301, "VIP", 1200.0, "Full Day", 2025)
    ticket2 = Ticket(302, "Standard", 600.0, "Half Day", 2025)

    discount = Discount(302, 10, ["VIP", "Standard"], datetime(2025, 12, 5))
    order = Order(402, customer, [], discount)
    order.add_ticket(ticket1)
    order.add_ticket(ticket2)
    customer.makePurchase(ticket2)

    original_total = order.calculateOriginalTotal()
    total_after_discount = order.applyDiscount()

    payment = Payment(502, total_after_discount, "Cash", order, discount)
    payment.process_payment()

    invoice = Invoice(602, order, payment, customer, total_after_discount, datetime.now(),
                      "Paid" if payment.payment_status else "Pending")

    print("-----Admin:-----")
    print(f"  ID: {admin.user_id}\n  "
          f"Name: {admin.name}\n  "
          f"Age: {admin.age}\n  "
          f"Email: {admin.email}\n  "
          f"Phone: {admin.phone_number}")
    print(f"  Active: {admin.is_active}\n  "
          f"Permissions: {admin.permissions}\n  "
          f"Capacity: {admin.capacity}")

    print("\n-----Customer:-----")
    print(
        f"  ID: {customer.user_id}\n"
        f"  Name: {customer.name}\n"
        f"  Age: {customer.age}\n"
        f"  Email: {customer.email}\n"
        f"  Wallet Balance: {customer.wallet_balance}\n"
        f"  Purchase History: {[ticket.ticket_id for ticket in customer.purchase_history]}\n"
        f"  Account Created: {customer.account_created}")

    print("\n-----Event:-----")
    print(
        f"  ID: {event.event_id}\n  "
        f"Name: {event.event_name}\n  "
        f"Date: {event.date}\n  "
        f"Location: {event.location}\n  "
        f"Description: {event.description}\n"
        f"Available Tickets: {event.tickets_available}\n"
        f"Number of Tickets Listed: {len(event.ticketsList)}")

    print("\n-----Tickets in Order:-----")
    for t in order.tickets:
        print(
            f"  ID: {t.ticket_id}\n"
            f"  Type: {t.ticket_type}\n"
            f"  Price: {t.price}\n"
            f"  Validity: {t.validity}\n"
            f"  Race Date: {t.race_date}")

    print("\n-----Order:-----")
    print(f"  ID: {order.order_id}\n"
          f"    Customer Name: {order.customer.name}\n"
          f"    Tickets: {[ticket.ticket_id for ticket in order.tickets]}\n"
          f"  Total Amount Before Discount: {original_total}\n"
          f"  Discount Applied: {discount.percentage}%\n"
          f"  Total After Discount: {total_after_discount}\n"
          f"  Order Date: {order.order_date}")

    print("\n-----Payment:-----")
    print(
        f"  ID: {payment.payment_id}\n"
        f"  Method: {payment.method}\n"
        f"  Status: {payment.payment_status}\n"
        f"  Date: {payment.payment_date}\n"
        f"  Original Amount: {payment.original_amount} AED\n"
        f"  Discount Applied: {discount.percentage}%\n"
        f"  Amount After Discount: {payment.final_amount} AED\n"
        f"  Order Ref: {payment.order.order_id}\n")

    print("\n-----Invoice:-----")
    print(f"  ID: {invoice.invoice_id}\n"
          f"  Customer Name: {invoice.customer.name}\n"
          f"  Order Ref: {invoice.order.order_id}\n"
          f"  Payment Ref: {invoice.payment.payment_id}\n"
          f"  Total: {invoice.total_amount}\n"
          f"  Status: {invoice.status}\n"
          f"  Issue Date: {invoice.issue_date}\n"
          f"  Is Paid?: {invoice.isPaid()}")


# Now call both test cases
test_case_1()
test_case_2()
